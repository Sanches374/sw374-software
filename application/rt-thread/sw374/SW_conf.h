#ifndef _SW_CONF_H_
#define _SW_CONF_H_

// #include <stdint.h>
// Tcpserver接收到的数据是否输出到日志
#define TcpServerDebug 
#define SW374_software_version "V1.0.0"
// ------------------------------------  TcpServer 相关配置  ------------------------------------ //
// 优先级
#define TcpServer_THREAD_PRIORITY 25
// 堆栈大小
#define TcpServer_THREAD_STACK_SIZE 8192
// 时间片
#define TcpServer_THREAD_TIMESLICE 25
// TcpServer接收数据的缓冲区大小
#define TcpServer_BUFSZ 16384
// TcpServer 的port端口
#define TcpServerPort 10001

// ------------------------------------  DataProcessor 相关配置  ------------------------------------ //
// 优先级
#define DataProcessor_THREAD_PRIORITY 20
// 堆栈大小
#define DataProcessor_THREAD_STACK_SIZE 8192
// 时间片
#define DataProcessor_THREAD_TIMESLICE 25


// ------------------------------------  WS2812B 相关配置  ------------------------------------ //
#define WS2812_THREAD_PRIORITY         25      // 线程优先级
#define WS2812_THREAD_STACK_SIZE       8192    // 线程大小
#define WS2812_THREAD_TIMESLICE        25      // 时间片


#define WS2812_NUMBERS    21             // 彩灯个数

#define WS2812_left_led_numbers 3
#define WS2812_top_led_numbers 15
#define WS2812_right_led_numbers 3

#define WS2812_RED        0xff0000      // 红色
#define WS2812_GREEN      0x00ff00      // 绿色
#define WS2812_BLUE       0x0000ff      // 蓝色
#define WS2812_BLACK      0x000000      // 熄灭
#define WS2812_WHITE      0xffffff      // 白色


#define WS2812_SQPSI_BUS_NANE           "qspi1"          //  qspi总线名称
#define WS2812_DEVICE_NAME      "ws2812_device"
#define WS2812_TIMER_NAME      "ws2812_timer"

#define WS2812_0_CODE           0xC0    // 0码
#define WS2812_1_CODE           0xFC    // 1码
#define WS2812_RESET_CODE       0x00    // 复位码

#define WS2812_TIMER_PERIOD 1000/30

//
const uint64_t RPM_FLASHING_COLOR[] = {\
    WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK,\
    WS2812_BLACK, WS2812_RED, WS2812_RED, WS2812_RED, WS2812_BLACK,\
    WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK\
};
const uint64_t PRM_FLASHING_CASE_0[] = {
    WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK,
    WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK,
    WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK
};
const uint64_t PRM_FLASHING_CASE_1[] = {
    WS2812_GREEN, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK,
    WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK,
    WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK
};
const uint64_t PRM_FLASHING_CASE_2[] = {
    WS2812_GREEN, WS2812_GREEN, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK,
    WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK,
    WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK
};
const uint64_t PRM_FLASHING_CASE_3[] = {
    WS2812_GREEN, WS2812_GREEN, WS2812_GREEN, WS2812_BLACK, WS2812_BLACK,
    WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK,
    WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK
};
const uint64_t PRM_FLASHING_CASE_4[] = {
    WS2812_GREEN, WS2812_GREEN, WS2812_GREEN, WS2812_GREEN, WS2812_BLACK,
    WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK,
    WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK
};
const uint64_t PRM_FLASHING_CASE_5[] = {
    WS2812_GREEN, WS2812_GREEN, WS2812_GREEN, WS2812_GREEN, WS2812_GREEN,
    WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK,
    WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK
};
const uint64_t PRM_FLASHING_CASE_6[] = {
    WS2812_GREEN, WS2812_GREEN, WS2812_GREEN, WS2812_GREEN, WS2812_GREEN,
    WS2812_BLUE, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK,
    WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK
};
const uint64_t PRM_FLASHING_CASE_7[] = {
    WS2812_GREEN, WS2812_GREEN, WS2812_GREEN, WS2812_GREEN, WS2812_GREEN,
    WS2812_BLUE, WS2812_BLUE, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK,
    WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK
};
const uint64_t PRM_FLASHING_CASE_8[] = {
    WS2812_GREEN, WS2812_GREEN, WS2812_GREEN, WS2812_GREEN, WS2812_GREEN,
    WS2812_BLUE, WS2812_BLUE, WS2812_BLUE, WS2812_BLACK, WS2812_BLACK,
    WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK
};
const uint64_t PRM_FLASHING_CASE_9[] = {
    WS2812_GREEN, WS2812_GREEN, WS2812_GREEN, WS2812_GREEN, WS2812_GREEN,
    WS2812_BLUE, WS2812_BLUE, WS2812_BLUE, WS2812_BLUE, WS2812_BLACK,
    WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK
};
const uint64_t PRM_FLASHING_CASE_10[] = {
    WS2812_GREEN, WS2812_GREEN, WS2812_GREEN, WS2812_GREEN, WS2812_GREEN,
    WS2812_BLUE, WS2812_BLUE, WS2812_BLUE, WS2812_BLUE, WS2812_BLUE,
    WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK
};
const uint64_t PRM_FLASHING_CASE_11[] = {
    WS2812_GREEN, WS2812_GREEN, WS2812_GREEN, WS2812_GREEN, WS2812_GREEN,
    WS2812_BLUE, WS2812_BLUE, WS2812_BLUE, WS2812_BLUE, WS2812_BLUE,
    WS2812_RED, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK
};
const uint64_t PRM_FLASHING_CASE_12[] = {
    WS2812_GREEN, WS2812_GREEN, WS2812_GREEN, WS2812_GREEN, WS2812_GREEN,
    WS2812_BLUE, WS2812_BLUE, WS2812_BLUE, WS2812_BLUE, WS2812_BLUE,
    WS2812_RED, WS2812_RED, WS2812_BLACK, WS2812_BLACK, WS2812_BLACK
};
const uint64_t PRM_FLASHING_CASE_13[] = {
    WS2812_GREEN, WS2812_GREEN, WS2812_GREEN, WS2812_GREEN, WS2812_GREEN,
    WS2812_BLUE, WS2812_BLUE, WS2812_BLUE, WS2812_BLUE, WS2812_BLUE,
    WS2812_RED, WS2812_RED, WS2812_RED, WS2812_BLACK, WS2812_BLACK
};
const uint64_t PRM_FLASHING_CASE_14[] = {
    WS2812_GREEN, WS2812_GREEN, WS2812_GREEN, WS2812_GREEN, WS2812_GREEN,
    WS2812_BLUE, WS2812_BLUE, WS2812_BLUE, WS2812_BLUE, WS2812_BLUE,
    WS2812_RED, WS2812_RED, WS2812_RED, WS2812_RED, WS2812_BLACK
};
const uint64_t PRM_FLASHING_CASE_15[] = {
    WS2812_GREEN, WS2812_GREEN, WS2812_GREEN, WS2812_GREEN, WS2812_GREEN,
    WS2812_BLUE, WS2812_BLUE, WS2812_BLUE, WS2812_BLUE, WS2812_BLUE,
    WS2812_RED, WS2812_RED, WS2812_RED, WS2812_RED, WS2812_RED
};
// ------------------------------------  LVGL 相关配置  ------------------------------------ //
// 定时器周期，单位为毫秒(屏幕刷新周期)
#define LVGL_SW_TIMER_PERIOD 1000/30


#define LVGL_SW_F1_PANNEL_COLOR_YELLOW 0xFFA500
#define LVGL_SW_F1_PANNEL_COLOR_RED 0xFF0000
#define LVGL_SW_F1_PANNEL_COLOR_GREEN 0x00FF00
#define LVGL_SW_F1_PANNEL_COLOR_GRAY 0x808080
#define LVGL_SW_F1_PANNEL_COLOR_WHITE 0xFFFFFF
#define LVGL_SW_F1_PANNEL_COLOR_BLACK 0x000000
#define LVGL_SW_F1_PANNEL_COLOR_BLUE 0x0000FF

#define READ_CONFIG_FILE_MAX_TIME 5 // 最多允许读取配置文件失败的次数

// 日志输出画面的参数
#define MAX_LOG_MESSAGES 10
#define MAX_MESSAGE_LENGTH 256

#endif  // _SW_CONF_H_
